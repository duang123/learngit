查看网络状态：   netstate -an | grep tcp | grep 5188
                 其中5188是端口号

查看进程状态：   ps -ef | grep echosrv
                 其中echosrv是进程名
设置非阻塞I/O：	    fcntl(fd,F_SETFL,flag|NONBLOCK)
非阻塞I/O又叫做忙等待，效率低，不推荐使用。

用select来管理多个I/O，一旦其中一个I/O或者多个I/O检测到我们感兴趣的事件，
select函数返回，返回值为检测到的事件个数。并且返回哪些I/O发生了事件，遍历
这些事件，进而处理事件.

套接子I/O超时设置方法:
  select实现超时：read_timeout函数封装
  				  write_timeout函数封装
				  accept-timeout函数封装
				  connect-timeout函数封装

关于gcc工具链的一些知识点:
gcc -c add.c -I ./include
其中-I 表示指定头文件的路径，尤其当头文件不在当前目录下时，需要指明
在编译文件时指定宏以输出过程信息：
 gcc t1.c -o t1 -I ./include -D DEBUG -O3 -Wall -g
 -o表示给生成文件一个名字，-D表示指定一个宏,-O表示允许编译器进行优化,-Wall表示给出警告信息，-g表示加入调试信息
 -E预处理，-S编译 ，-c汇编

 静态库的制作方法：
 1)命名： lib+库的名字+ .a		libmytest.a
 2)制作步骤：
           1.生成对应的.o文件 .c----> .o
		   2.将生成的.o文件打包 ar rcs+静态库名字(libmytest.a)+生成的所有的.o文件
3)发布和使用静态库：gcc t1.c ./lib/libmytest.a -o t1 -I ./include
静态库的优点：
1.发布程序的时候，不需要提供对应的库
2.加载库的速度快
缺点：
1.库被打包到应用程序中，导致库体积大
2.库发生了改变，需要重新编译程序

共享库的制作：
1.命名规则： lib+名字+.so
2.制作步骤：
			1.生成与位置无关的代码（生成与位置无关的.o）
				gcc -fPIC -c *.c -I ../include
			2.将.o打包成共享库（动态库）
			gcc -shared -o 名字 所需.o文件 -I 头文件
3.发布和使用共享库
	gcc t1.c 共享库名字(路径需要指定) -o 可执行文件起个名字 -I 头文件地址
4.解决程序执行时动态库无法加载的问题：
永久设置的办法：
	1).需要找到动态连接器的配置文件，并将动态库的路径(绝对路径)写到配置文件；
	/etc/ld.so.conf
	2).更新--sudo ldconfig -v
临时设置： export LD_LIBRARY_PATH=动态库路径
动态库优点：
	1.执行程序体积小；
	2.动态库更新了，不需要重新编译程序(函数接口不变)
缺点：
	1.发布程序的时候，需要将动态库提供给用户；
	2.动态库没有被打包到应用程序中，加载速度较慢。

gdb调试：
1.启动gdb   start----只执行一步
			n--next
			s---step(单步)--可以进入函数体内部
			c--continue---直接停在断点位置
2.查看代码：	l---list 
				l 行号/函数名  或者 l filename : 行号/函数名
3.设置断点：
	设置当前文件断点：  b---break
						b 行号/函数名   或者 b filename: 行号/函数名
	设置条件断点： b 10 if value==19
	删除断点 ： delete --del -d
				d 断电的编号(通过info b获得)
4.查看设置的断点
5.开始执行gdb调试
6.单步调试： 进入函数体内： s
			从函数体内部跳出： finish
			不进入函数体内部： n
			退出当前循环： u
7.查看变量的值： p 变量名
8.查看变量类型： ptype 变量名
9.设置变量值： set var 变量名=赋值
10.设置追踪变量： display
	取消追踪变量： undisplay 编号(info display获取编号)
11.退出gdb调试：q

makefile的编写：
1.规则：三要素：目标，依赖，命令
		目标：依赖条件
			命令
makefile中的模式规则：
%.o:%.c
	gcc -c $< -o $@
makefile中的自动变量：
	$<:规则中的第一个依赖
	$@:规则中的目标
	$^:规则中的所有依赖
只能在规则的命令中使用
makefile中的函数的使用：
          src=$(wildcard ./*.c)  //获取指定目录下的.c文件
		  obj=$(patsubst ./%.c,./%.o,$(src) ) //匹配替换 

select的限制：
	1. 一个进程能打开的最大文件描述符限制。这可通过调整内核参数实现(ulimit -n+数字 或者函数 setrlimit)
	2.select中的fd_set集合容量的限制(FD_SETSIZE),这需要重新编译内核
